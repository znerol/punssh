#!/usr/bin/env python3

import argparse
import jinja2
import yaml


def punssh_load(path):
    """
    Loads configuration from yaml file and returns it.
    """
    with open(path) as stream:
        return yaml.safe_load(stream)


def punssh_auth(host, config, **opts):
    """
    Extracts tunnel entries matching `host` from config and applies the
    specified auth template.
    """
    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader('punssh/templates'),
    )

    for tunnel in config.get("tunnels", []):
        if tunnel["host"] == host:
            tplname = "{:s}.auth.j2".format(tunnel["template"])
            template = env.get_template(tplname)
            variables = dict(opts)
            variables.update(tunnel)
            yield template.render(**variables)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            description='prints authorized_keys for given tunnels to stdout')
    parser.add_argument(
            '-f', help='config file', default="punssh/config.yml")
    parser.add_argument(
            '-c', help='punssh-config command line',
            default="punssh-config")
    parser.add_argument(
            'host', help='host of destination host')
    args = parser.parse_args()

    confcmd = "{:s} -f {:s}".format(args.c, args.f)
    for line in punssh_auth(args.host, punssh_load(args.f), command=confcmd):
        print(line)
